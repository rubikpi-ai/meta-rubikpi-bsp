From 87561dedebf842602e80923bb48f3f7d42d66a0f Mon Sep 17 00:00:00 2001
From: Aswin Murugan <quic_aswinm@quicinc.com>
Date: Mon, 14 Apr 2025 11:26:53 +0530
Subject: [PATCH] PENDING: Added I2C read issue fix in qcs9100

Faced an issue in listing available slave addresses during I2C probe
commands at lower clock frequencies (100KHz and 400KHz). The problem
was identified as continuous I2C reads causing the master to receive
continuous NACKs, leading to an invalid I2C bus state and delayed
recovery, which prevented the listing of available slave addresses.
To resolve this, a condition was added to abort the previous command
which will reset the I2C controller before initiating the next transfer.

Signed-off-by: Aswin Murugan <quic_aswinm@quicinc.com>
Upstream-Status: Pending
---
 cmd/i2c.c              | 1 -
 drivers/i2c/geni_i2c.c | 2 +-
 2 files changed, 1 insertion(+), 2 deletions(-)

diff --git a/cmd/i2c.c b/cmd/i2c.c
index 6ecd8c0599f..7246c4fa3e7 100644
--- a/cmd/i2c.c
+++ b/cmd/i2c.c
@@ -947,7 +947,6 @@ static int do_i2c_probe(struct cmd_tbl *cmdtp, int flag, int argc,
 #else
 		ret = i2c_probe(j);
 #endif
-		udelay(20);
 		if (ret == 0) {
 			printf(" %02X", j);
 			found++;
diff --git a/drivers/i2c/geni_i2c.c b/drivers/i2c/geni_i2c.c
index eabf5c76c21..9d35dce991f 100644
--- a/drivers/i2c/geni_i2c.c
+++ b/drivers/i2c/geni_i2c.c
@@ -284,7 +284,7 @@ static int geni_i2c_xfer(struct udevice *bus, struct i2c_msg msgs[], int num)
 	}
 
 	if (ret) {
-		if (ret == -ETIMEDOUT) {
+		if (ret == -ETIMEDOUT || ret == -EREMOTEIO) {
 			u32 status;
 
 			writel(M_GENI_CMD_ABORT, geni->base + SE_GENI_M_CMD_CTRL_REG);
-- 
2.34.1

