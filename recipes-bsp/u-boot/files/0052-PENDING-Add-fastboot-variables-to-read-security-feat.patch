From abeb03f1112297f72a59ab5f5fac4509b8a452cb Mon Sep 17 00:00:00 2001
From: Balaji Selvanathan <quic_bselvana@quicinc.com>
Date: Thu, 15 May 2025 11:58:54 +0530
Subject: [PATCH] PENDING: Add fastboot variables to read security features

Add fastboot variables support to read security features such as
Secure Boot enabled, Antirollback enabled, RPMB provisioned and
whether the device is in productions state.
The security features are obtained by making SMC calls to TZ.

Signed-off-by: Balaji Selvanathan <quic_bselvana@quicinc.com>
Upstream-Status: Pending
---
 drivers/fastboot/fb_getvar.c | 71 ++++++++++++++++++++++++++++++++++++
 1 file changed, 71 insertions(+)

diff --git a/drivers/fastboot/fb_getvar.c b/drivers/fastboot/fb_getvar.c
index 9c2ce65a4e5..0082f5978a0 100644
--- a/drivers/fastboot/fb_getvar.c
+++ b/drivers/fastboot/fb_getvar.c
@@ -13,6 +13,13 @@
 #include <version.h>
 #include <vsprintf.h>
 #include <linux/printk.h>
+#include <linux/arm-smccc.h>
+
+#define TZ_INFO_GET_SECURE_STATE 0x02000604
+#define SECBOOT_BIT BIT(0)
+#define ANTIROLLBACK_BIT BIT(3)
+#define RPMB_BIT BIT(5)
+#define PRODUCTION_STATE_VALUE 0x40
 
 static void getvar_version(char *var_parameter, char *response);
 static void getvar_version_bootloader(char *var_parameter, char *response);
@@ -26,6 +33,10 @@ static void getvar_has_slot(char *var_parameter, char *response);
 static void getvar_partition_type(char *part_name, char *response);
 static void getvar_partition_size(char *part_name, char *response);
 static void getvar_is_userspace(char *var_parameter, char *response);
+static void getvar_is_secure(char *var_parameter, char *response);
+static void getvar_is_antirollback(char *var_parameter, char *response);
+static void getvar_is_rpmb(char *var_parameter, char *response);
+static void getvar_is_production(char *var_parameter, char *response);
 
 static const struct {
 	const char *variable;
@@ -90,6 +101,22 @@ static const struct {
 		.variable = "is-userspace",
 		.dispatch = getvar_is_userspace,
 		.list = true
+	}, {
+		.variable = "is-secure",
+		.dispatch = getvar_is_secure,
+		.list = false
+	}, {
+		.variable = "is-antirollback",
+		.dispatch = getvar_is_antirollback,
+		.list = false
+	}, {
+		.variable = "is-rpmb",
+		.dispatch = getvar_is_rpmb,
+		.list = false
+	}, {
+		.variable = "is-production",
+		.dispatch = getvar_is_production,
+		.list = false
 	}
 };
 
@@ -252,6 +279,50 @@ static void getvar_is_userspace(char *var_parameter, char *response)
 	fastboot_okay("no", response);
 }
 
+static void getvar_is_secure(char *var_parameter, char *response)
+{
+	struct arm_smccc_res res;
+
+	arm_smccc_smc(TZ_INFO_GET_SECURE_STATE, 0, 0, 0, 0, 0, 0, 0, &res);
+	if (res.a1 & SECBOOT_BIT)
+		fastboot_okay("SecBoot is not enabled", response);
+	else
+		fastboot_okay("SecBoot is enabled", response);
+}
+
+static void getvar_is_antirollback(char *var_parameter, char *response)
+{
+	struct arm_smccc_res res;
+
+	arm_smccc_smc(TZ_INFO_GET_SECURE_STATE, 0, 0, 0, 0, 0, 0, 0, &res);
+	if (res.a1 & ANTIROLLBACK_BIT)
+		fastboot_okay("Antirollback is not enabled", response);
+	else
+		fastboot_okay("Antirollback is enabled", response);
+}
+
+static void getvar_is_rpmb(char *var_parameter, char *response)
+{
+	struct arm_smccc_res res;
+
+	arm_smccc_smc(TZ_INFO_GET_SECURE_STATE, 0, 0, 0, 0, 0, 0, 0, &res);
+	if (res.a1 & RPMB_BIT)
+		fastboot_okay("RPMB is not provisioned", response);
+	else
+		fastboot_okay("RPMB is provisioned", response);
+}
+
+static void getvar_is_production(char *var_parameter, char *response)
+{
+	struct arm_smccc_res res;
+
+	arm_smccc_smc(TZ_INFO_GET_SECURE_STATE, 0, 0, 0, 0, 0, 0, 0, &res);
+	if (res.a1 == PRODUCTION_STATE_VALUE)
+		fastboot_okay("Device in production state", response);
+	else
+		fastboot_okay("Device not in production state", response);
+}
+
 static int current_all_dispatch;
 void fastboot_getvar_all(char *response)
 {
-- 
2.34.1

