From 8c89f19455b9357ec5068a3a73b37ba7b04ded11 Mon Sep 17 00:00:00 2001
From: Balaji Selvanathan <quic_bselvana@quicinc.com>
Date: Wed, 26 Mar 2025 22:16:12 +0530
Subject: [PATCH] PENDING: Add Display driver clock support

Added support for Display driver clocks (of display clock
controller 0 (dispcc0)) and some GCC clocks (for display);
This file: drivers/clk/qcom/clock-sa8775p-dispcc0.c is ported from
following file in U-Boot:
https://source.denx.de/u-boot/u-boot/-/blob/master/drivers/clk/qcom/clock-sa8775p.c?id=b3c48d8f827805fdbf0df8c07b5d24f05a3ec081
The dt-bindings file: dts/upstream/include/dt-bindings/clock/qcom,sa8775p-dispcc.h is a port of
the upstream Linux changes sa8775p to U-Boot:
https://web.git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/dt-bindings/clock/qcom%2Csa8775p-dispcc.h?id=33b5cd95d801cab8c634c822e6877470f4209612

Signed-off-by: Balaji Selvanathan <quic_bselvana@quicinc.com>
Upstream-Status: Pending
---
 drivers/clk/qcom/Makefile                     |   1 +
 drivers/clk/qcom/clock-qcom.c                 |  40 ++++
 drivers/clk/qcom/clock-qcom.h                 |   1 +
 drivers/clk/qcom/clock-sa8775p-dispcc0.c      | 209 ++++++++++++++++++
 drivers/clk/qcom/clock-sa8775p.c              |   2 +
 .../dt-bindings/clock/qcom,sa8775p-dispcc.h   |  87 ++++++++
 6 files changed, 340 insertions(+)
 create mode 100644 drivers/clk/qcom/clock-sa8775p-dispcc0.c
 create mode 100644 dts/upstream/include/dt-bindings/clock/qcom,sa8775p-dispcc.h

diff --git a/drivers/clk/qcom/Makefile b/drivers/clk/qcom/Makefile
index 01b541af329..017fc459305 100644
--- a/drivers/clk/qcom/Makefile
+++ b/drivers/clk/qcom/Makefile
@@ -16,3 +16,4 @@ obj-$(CONFIG_CLK_QCOM_SM8250) += clock-sm8250.o
 obj-$(CONFIG_CLK_QCOM_SM8550) += clock-sm8550.o
 obj-$(CONFIG_CLK_QCOM_SM8650) += clock-sm8650.o
 obj-$(CONFIG_CLK_QCOM_SA8775P) += clock-sa8775p.o
+obj-$(CONFIG_CLK_QCOM_SA8775P) += clock-sa8775p-dispcc0.o
diff --git a/drivers/clk/qcom/clock-qcom.c b/drivers/clk/qcom/clock-qcom.c
index 25ca67e537d..dd1fe37150a 100644
--- a/drivers/clk/qcom/clock-qcom.c
+++ b/drivers/clk/qcom/clock-qcom.c
@@ -348,6 +348,46 @@ U_BOOT_DRIVER(qcom_clk) = {
 	.flags		= DM_FLAG_PRE_RELOC | DM_FLAG_DEFAULT_PD_CTRL_OFF,
 };
 
+int qcom_dispcc_bind(struct udevice *parent)
+{
+	struct msm_clk_data *data = (struct msm_clk_data *)dev_get_driver_data(parent);
+	struct udevice *clkdev = NULL, *pwrdev;
+	struct driver *drv;
+	int ret;
+
+	/* Get a handle to the common clk handler */
+	drv = lists_driver_lookup_name("qcom_clk");
+	if (!drv)
+		return -ENOENT;
+
+	/* Register the display clock controller */
+	ret = device_bind_with_driver_data(parent, drv, "qcom_dispcc0_clk", (ulong)data,
+					   dev_ofnode(parent), &clkdev);
+	if (ret)
+		return ret;
+
+	if (data->power_domains) {
+		/* Get a handle to the common power domain handler */
+		drv = lists_driver_lookup_name("qcom_power");
+		if (!drv) {
+			ret = -ENOENT;
+			goto unbind_clkdev;
+		}
+		/* Register the display power domain controller */
+		ret = device_bind_with_driver_data(parent, drv, "qcom_dispcc0_power", (ulong)data,
+						   dev_ofnode(parent), &pwrdev);
+		if (ret)
+			goto unbind_clkdev;
+	}
+
+	return 0;
+
+unbind_clkdev:
+	device_unbind(clkdev);
+
+	return ret;
+}
+
 int qcom_cc_bind(struct udevice *parent)
 {
 	struct msm_clk_data *data = (struct msm_clk_data *)dev_get_driver_data(parent);
diff --git a/drivers/clk/qcom/clock-qcom.h b/drivers/clk/qcom/clock-qcom.h
index 78d9b1d81ec..2147c46dfd3 100644
--- a/drivers/clk/qcom/clock-qcom.h
+++ b/drivers/clk/qcom/clock-qcom.h
@@ -92,6 +92,7 @@ struct msm_clk_priv {
 	struct msm_clk_data	*data;
 };
 
+int qcom_dispcc_bind(struct udevice *parent);
 int qcom_cc_bind(struct udevice *parent);
 void clk_enable_gpll0(phys_addr_t base, const struct pll_vote_clk *gpll0);
 void clk_bcr_update(phys_addr_t apps_cmd_rgcr);
diff --git a/drivers/clk/qcom/clock-sa8775p-dispcc0.c b/drivers/clk/qcom/clock-sa8775p-dispcc0.c
new file mode 100644
index 00000000000..527030f511b
--- /dev/null
+++ b/drivers/clk/qcom/clock-sa8775p-dispcc0.c
@@ -0,0 +1,209 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Clock drivers for Qualcomm sa8775p
+ *
+ * (C) Copyright 2024 Linaro Ltd.
+ */
+
+#include <linux/types.h>
+#include <clk-uclass.h>
+#include <dm.h>
+#include <linux/delay.h>
+#include <asm/io.h>
+#include <linux/bug.h>
+#include <linux/bitops.h>
+#include <dt-bindings/clock/qcom,sa8775p-dispcc.h>
+#include "clock-qcom.h"
+
+#define MDSS_0_DISP_CC_MDSS_AHB_CMD_RCGR	0x824C
+#define MDSS_0_DISP_CC_MDSS_MDP_CMD_RCGR	0x80BC
+#define MDSS_0_DISP_CC_MDSS_VSYNC_CMD_RCGR	0x80D4
+#define MDSS_0_DISP_CC_MDSS_BYTE0_CMD_RCGR	0x80EC
+#define MDSS_0_DISP_CC_MDSS_PCLK0_CMD_RCGR	0x808C
+#define MDSS_0_DISP_CC_MDSS_ESC0_CMD_RCGR	0x8124
+#define MDSS_0_DISP_CC_MDSS_BYTE1_CMD_RCGR	0x8108
+#define MDSS_0_DISP_CC_MDSS_PCLK1_CMD_RCGR	0x80A4
+#define MDSS_0_DISP_CC_MDSS_ESC1_CMD_RCGR	0x813C
+#define MDSS_0_DISP_CC_MDSS_DPTX0_AUX_CMD_RCGR	0x81B8
+#define MDSS_0_DISP_CC_MDSS_DPTX0_LINK_CMD_RCGR	0x8154
+#define MDSS_0_DISP_CC_MDSS_DPTX0_PIXEL0_CMD_RCGR	0x8188
+#define MDSS_0_DISP_CC_MDSS_DPTX0_PIXEL1_CMD_RCGR	0x81A0
+#define MDSS_0_DISP_CC_MDSS_DPTX1_AUX_CMD_RCGR	0x8234
+#define MDSS_0_DISP_CC_MDSS_DPTX1_LINK_CMD_RCGR	0x8200
+#define MDSS_0_DISP_CC_MDSS_DPTX1_PIXEL0_CMD_RCGR	0x81D0
+#define MDSS_0_DISP_CC_MDSS_DPTX1_PIXEL1_CMD_RCGR	0x81E8
+
+static ulong sa8775p_dispcc0_set_rate(struct clk *clk, ulong rate)
+{
+	struct msm_clk_priv *priv = dev_get_priv(clk->dev);
+
+	if (clk->id < priv->data->num_clks)
+		debug("%s: %s, requested rate=%ld\n", __func__, priv->data->clks[clk->id].name,
+		      rate);
+
+	switch (clk->id) {
+	case MDSS_DISP_CC_MDSS_AHB_CLK:
+		WARN(rate != 75000000, "Unexpected rate for MDSS_DISP_CC_MDSS_AHB_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_AHB_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_MDP_CLK:
+		WARN(rate != 500000000, "Unexpected rate for MDSS_DISP_CC_MDSS_MDP_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_MDP_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_VSYNC_CLK:
+		WARN(rate != 19200000, "Unexpected rate for MDSS_DISP_CC_MDSS_VSYNC_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_VSYNC_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+
+	case MDSS_DISP_CC_MDSS_BYTE0_CLK:
+		WARN(rate != 358000000, "Unexpected rate for MDSS_DISP_CC_MDSS_BYTE0_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_BYTE0_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_PCLK0_CLK:
+		WARN(rate != 625000000, "Unexpected rate for MDSS_DISP_CC_MDSS_PCLK0_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_PCLK0_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_ESC0_CLK:
+		WARN(rate != 19200000, "Unexpected rate for MDSS_DISP_CC_MDSS_ESC0_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_ESC0_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+
+	case MDSS_DISP_CC_MDSS_BYTE1_CLK:
+		WARN(rate != 358000000, "Unexpected rate for MDSS_DISP_CC_MDSS_BYTE1_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_BYTE1_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_PCLK1_CLK:
+		WARN(rate != 625000000, "Unexpected rate for MDSS_DISP_CC_MDSS_PCLK1_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_PCLK1_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_ESC1_CLK:
+		WARN(rate != 19200000, "Unexpected rate for MDSS_DISP_CC_MDSS_ESC1_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_ESC1_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+
+	case MDSS_DISP_CC_MDSS_DPTX0_AUX_CLK:
+		WARN(rate != 19200000, "Unexpected rate for MDSS_DISP_CC_MDSS_DPTX0_AUX_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_DPTX0_AUX_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_DPTX0_LINK_CLK:
+		WARN(rate != 810000000, "Unexpected rate for MDSS_DISP_CC_MDSS_DPTX0_AUX_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_DPTX0_LINK_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_DPTX0_PIXEL0_CLK:
+		WARN(rate != 675000000, "Unexpected rate for MDSS_DISP_CC_MDSS_DPTX0_PIXEL0_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_DPTX0_PIXEL0_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_DPTX0_PIXEL1_CLK:
+		WARN(rate != 675000000, "Unexpected rate for MDSS_DISP_CC_MDSS_DPTX0_PIXEL1_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_DPTX0_PIXEL1_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+
+	case MDSS_DISP_CC_MDSS_DPTX1_AUX_CLK:
+		WARN(rate != 19200000, "Unexpected rate for MDSS_DISP_CC_MDSS_DPTX1_AUX_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_DPTX1_AUX_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_DPTX1_LINK_CLK:
+		WARN(rate != 810000000, "Unexpected rate for MDSS_DISP_CC_MDSS_DPTX1_LINK_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_DPTX1_LINK_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_DPTX1_PIXEL0_CLK:
+		WARN(rate != 675000000, "Unexpected rate for MDSS_DISP_CC_MDSS_DPTX1_PIXEL0_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_DPTX1_PIXEL0_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	case MDSS_DISP_CC_MDSS_DPTX1_PIXEL1_CLK:
+		WARN(rate != 675000000, "Unexpected rate for MDSS_DISP_CC_MDSS_DPTX1_PIXEL1_CLK: %lu\n", rate);
+		clk_rcg_set_rate(priv->base, MDSS_0_DISP_CC_MDSS_DPTX1_PIXEL1_CMD_RCGR, 1,
+				 CFG_CLK_SRC_CXO);
+		return rate;
+	default:
+		return 0;
+	}
+}
+
+static const struct gate_clk sa8775p_dispcc0_clks[] = {
+	GATE_CLK(MDSS_DISP_CC_MDSS_AHB_CLK, 0x8084, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_MDP_CLK, 0x800C, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_VSYNC_CLK, 0x802C, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_MDP_LUT_CLK, 0x801C, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_BYTE0_CLK, 0x8034, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_BYTE0_INTF_CLK, 0x8038, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_PCLK0_CLK, 0x8004, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_ESC0_CLK, 0x8044, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_BYTE1_CLK, 0x803C, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_BYTE1_INTF_CLK, 0x8040, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_PCLK1_CLK, 0x8008, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_ESC1_CLK, 0x8048, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_DPTX0_AUX_CLK, 0x805C, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_DPTX0_LINK_CLK, 0x804C, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_DPTX0_LINK_INTF_CLK, 0x8050, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_DPTX0_PIXEL0_CLK, 0x8060, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_DPTX0_PIXEL1_CLK, 0x8064, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_DPTX1_AUX_CLK, 0x8080, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_DPTX1_LINK_CLK, 0x8070, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_DPTX1_LINK_INTF_CLK, 0x8074, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_DPTX1_PIXEL0_CLK, 0x8068, 1),
+	GATE_CLK(MDSS_DISP_CC_MDSS_DPTX1_PIXEL1_CLK, 0x806C, 1)
+};
+
+static int sa8775p_dispcc0_enable(struct clk *clk)
+{
+	struct msm_clk_priv *priv = dev_get_priv(clk->dev);
+
+	if (priv->data->num_clks < clk->id) {
+		debug("%s: unknown clk id %lu\n", __func__, clk->id);
+		return 0;
+	}
+
+	debug("%s: clk %ld: %s\n", __func__, clk->id, sa8775p_dispcc0_clks[clk->id].name);
+
+	qcom_gate_clk_en(priv, clk->id);
+
+	return 0;
+}
+
+static const struct qcom_power_map sa8775p_dispcc0_gdscs[] = {
+	[MDSS_DISP_CC_MDSS_CORE_GDSC] = { 0x9000 },
+};
+
+static struct msm_clk_data sa8775_dispcc0_data = {
+	.clks = sa8775p_dispcc0_clks,
+	.num_clks = ARRAY_SIZE(sa8775p_dispcc0_clks),
+
+	.power_domains = sa8775p_dispcc0_gdscs,
+	.num_power_domains = ARRAY_SIZE(sa8775p_dispcc0_gdscs),
+
+	.enable = sa8775p_dispcc0_enable,
+	.set_rate = sa8775p_dispcc0_set_rate,
+};
+
+static const struct udevice_id dispcc0_sa8775p_of_match[] = {
+	{
+		.compatible = "qcom,sa8775p-dispcc0",
+		.data = (ulong)&sa8775_dispcc0_data,
+	},
+	{ }
+};
+
+U_BOOT_DRIVER(dispcc0_sa8775p) = {
+	.name		= "dispcc0_sa8775p",
+	.id		= UCLASS_NOP,
+	.of_match	= dispcc0_sa8775p_of_match,
+	.bind		= qcom_dispcc_bind,
+	.flags		= DM_FLAG_PRE_RELOC,
+};
diff --git a/drivers/clk/qcom/clock-sa8775p.c b/drivers/clk/qcom/clock-sa8775p.c
index aeaa3716535..9197203dcfb 100644
--- a/drivers/clk/qcom/clock-sa8775p.c
+++ b/drivers/clk/qcom/clock-sa8775p.c
@@ -108,6 +108,8 @@ static const struct gate_clk sa8775p_clks[] = {
 	GATE_CLK(GCC_QUPV3_WRAP2_S4_CLK, 0x4b010, GCC_QUPV3_WRAP2_S4_CLK_ENA_BIT),
 	GATE_CLK(GCC_QUPV3_WRAP2_S5_CLK, 0x4b010, GCC_QUPV3_WRAP2_S5_CLK_ENA_BIT),
 	GATE_CLK(GCC_QUPV3_WRAP3_S0_CLK, 0x4b000, GCC_QUPV3_WRAP3_S0_CLK_ENA_BIT),
+	GATE_CLK(GCC_DISP_HF_AXI_CLK, 0x33010, 1),
+	GATE_CLK(GCC_DISP_AHB_CLK, 0x33004, 1)
 };
 
 static int sa8775p_enable(struct clk *clk)
diff --git a/dts/upstream/include/dt-bindings/clock/qcom,sa8775p-dispcc.h b/dts/upstream/include/dt-bindings/clock/qcom,sa8775p-dispcc.h
new file mode 100644
index 00000000000..45dd7f2e969
--- /dev/null
+++ b/dts/upstream/include/dt-bindings/clock/qcom,sa8775p-dispcc.h
@@ -0,0 +1,87 @@
+/* SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause) */
+/*
+ * Copyright (c) 2024-2025, Qualcomm Innovation Center, Inc. All rights reserved.
+ */
+
+#ifndef _DT_BINDINGS_CLK_QCOM_SA8775P_DISP_CC_H
+#define _DT_BINDINGS_CLK_QCOM_SA8775P_DISP_CC_H
+
+/* DISP_CC_0/1 clocks */
+#define MDSS_DISP_CC_MDSS_AHB1_CLK				0
+#define MDSS_DISP_CC_MDSS_AHB_CLK				1
+#define MDSS_DISP_CC_MDSS_AHB_CLK_SRC				2
+#define MDSS_DISP_CC_MDSS_BYTE0_CLK				3
+#define MDSS_DISP_CC_MDSS_BYTE0_CLK_SRC				4
+#define MDSS_DISP_CC_MDSS_BYTE0_DIV_CLK_SRC			5
+#define MDSS_DISP_CC_MDSS_BYTE0_INTF_CLK			6
+#define MDSS_DISP_CC_MDSS_BYTE1_CLK				7
+#define MDSS_DISP_CC_MDSS_BYTE1_CLK_SRC				8
+#define MDSS_DISP_CC_MDSS_BYTE1_DIV_CLK_SRC			9
+#define MDSS_DISP_CC_MDSS_BYTE1_INTF_CLK			10
+#define MDSS_DISP_CC_MDSS_DPTX0_AUX_CLK				11
+#define MDSS_DISP_CC_MDSS_DPTX0_AUX_CLK_SRC			12
+#define MDSS_DISP_CC_MDSS_DPTX0_CRYPTO_CLK			13
+#define MDSS_DISP_CC_MDSS_DPTX0_CRYPTO_CLK_SRC			14
+#define MDSS_DISP_CC_MDSS_DPTX0_LINK_CLK			15
+#define MDSS_DISP_CC_MDSS_DPTX0_LINK_CLK_SRC			16
+#define MDSS_DISP_CC_MDSS_DPTX0_LINK_DIV_CLK_SRC		17
+#define MDSS_DISP_CC_MDSS_DPTX0_LINK_INTF_CLK			18
+#define MDSS_DISP_CC_MDSS_DPTX0_PIXEL0_CLK			19
+#define MDSS_DISP_CC_MDSS_DPTX0_PIXEL0_CLK_SRC			20
+#define MDSS_DISP_CC_MDSS_DPTX0_PIXEL1_CLK			21
+#define MDSS_DISP_CC_MDSS_DPTX0_PIXEL1_CLK_SRC			22
+#define MDSS_DISP_CC_MDSS_DPTX0_PIXEL2_CLK			23
+#define MDSS_DISP_CC_MDSS_DPTX0_PIXEL2_CLK_SRC			24
+#define MDSS_DISP_CC_MDSS_DPTX0_PIXEL3_CLK			25
+#define MDSS_DISP_CC_MDSS_DPTX0_PIXEL3_CLK_SRC			26
+#define MDSS_DISP_CC_MDSS_DPTX0_USB_ROUTER_LINK_INTF_CLK	27
+#define MDSS_DISP_CC_MDSS_DPTX1_AUX_CLK				28
+#define MDSS_DISP_CC_MDSS_DPTX1_AUX_CLK_SRC			29
+#define MDSS_DISP_CC_MDSS_DPTX1_CRYPTO_CLK			30
+#define MDSS_DISP_CC_MDSS_DPTX1_CRYPTO_CLK_SRC			31
+#define MDSS_DISP_CC_MDSS_DPTX1_LINK_CLK			32
+#define MDSS_DISP_CC_MDSS_DPTX1_LINK_CLK_SRC			33
+#define MDSS_DISP_CC_MDSS_DPTX1_LINK_DIV_CLK_SRC		34
+#define MDSS_DISP_CC_MDSS_DPTX1_LINK_INTF_CLK			35
+#define MDSS_DISP_CC_MDSS_DPTX1_PIXEL0_CLK			36
+#define MDSS_DISP_CC_MDSS_DPTX1_PIXEL0_CLK_SRC			37
+#define MDSS_DISP_CC_MDSS_DPTX1_PIXEL1_CLK			38
+#define MDSS_DISP_CC_MDSS_DPTX1_PIXEL1_CLK_SRC			39
+#define MDSS_DISP_CC_MDSS_DPTX1_USB_ROUTER_LINK_INTF_CLK	40
+#define MDSS_DISP_CC_MDSS_ESC0_CLK				41
+#define MDSS_DISP_CC_MDSS_ESC0_CLK_SRC				42
+#define MDSS_DISP_CC_MDSS_ESC1_CLK				43
+#define MDSS_DISP_CC_MDSS_ESC1_CLK_SRC				44
+#define MDSS_DISP_CC_MDSS_MDP1_CLK				45
+#define MDSS_DISP_CC_MDSS_MDP_CLK				46
+#define MDSS_DISP_CC_MDSS_MDP_CLK_SRC				47
+#define MDSS_DISP_CC_MDSS_MDP_LUT1_CLK				48
+#define MDSS_DISP_CC_MDSS_MDP_LUT_CLK				49
+#define MDSS_DISP_CC_MDSS_NON_GDSC_AHB_CLK			50
+#define MDSS_DISP_CC_MDSS_PCLK0_CLK				51
+#define MDSS_DISP_CC_MDSS_PCLK0_CLK_SRC				52
+#define MDSS_DISP_CC_MDSS_PCLK1_CLK				53
+#define MDSS_DISP_CC_MDSS_PCLK1_CLK_SRC				54
+#define MDSS_DISP_CC_MDSS_PLL_LOCK_MONITOR_CLK			55
+#define MDSS_DISP_CC_MDSS_RSCC_AHB_CLK				56
+#define MDSS_DISP_CC_MDSS_RSCC_VSYNC_CLK			57
+#define MDSS_DISP_CC_MDSS_VSYNC1_CLK				58
+#define MDSS_DISP_CC_MDSS_VSYNC_CLK				59
+#define MDSS_DISP_CC_MDSS_VSYNC_CLK_SRC				60
+#define MDSS_DISP_CC_PLL0					61
+#define MDSS_DISP_CC_PLL1					62
+#define MDSS_DISP_CC_SLEEP_CLK					63
+#define MDSS_DISP_CC_SLEEP_CLK_SRC				64
+#define MDSS_DISP_CC_SM_OBS_CLK					65
+#define MDSS_DISP_CC_XO_CLK					66
+#define MDSS_DISP_CC_XO_CLK_SRC					67
+
+/* DISP_CC_0/1 power domains */
+#define MDSS_DISP_CC_MDSS_CORE_GDSC				0
+#define MDSS_DISP_CC_MDSS_CORE_INT2_GDSC			1
+
+/* DISP_CC_0/1 resets */
+#define MDSS_DISP_CC_MDSS_CORE_BCR				0
+#define MDSS_DISP_CC_MDSS_RSCC_BCR				1
+
+#endif
-- 
2.34.1

