From 3e5a69aa8782f37e955f40467518e7787983c25d Mon Sep 17 00:00:00 2001
From: Balaji Selvanathan <quic_bselvana@quicinc.com>
Date: Fri, 16 May 2025 09:23:06 +0530
Subject: [PATCH] PENDING: drivers: rng: Enable hardware random number
 generator

Enable hardware random number generator for Qualcomm Dragonwing
chipsets by modifying existing random number generator driver for
MSM IPQ chipsets.

Signed-off-by: Balaji Selvanathan <quic_bselvana@quicinc.com>
Upstream-Status: Pending
---
 arch/arm/dts/qcs9100-ride-r3-u-boot.dtsi |  1 -
 configs/qcom_defconfig                   |  4 ++++
 drivers/rng/msm_rng.c                    | 25 ++++++++++++++++++++++--
 3 files changed, 27 insertions(+), 3 deletions(-)

diff --git a/arch/arm/dts/qcs9100-ride-r3-u-boot.dtsi b/arch/arm/dts/qcs9100-ride-r3-u-boot.dtsi
index 7da40bdc99d..5c58210d96d 100644
--- a/arch/arm/dts/qcs9100-ride-r3-u-boot.dtsi
+++ b/arch/arm/dts/qcs9100-ride-r3-u-boot.dtsi
@@ -314,7 +314,6 @@
 /delete-node/ &serdes0;
 /delete-node/ &serdes1;
 /delete-node/ &pdc;
-/delete-node/ &rng;
 /delete-node/ &ipcc;
 /delete-node/ &aoss_qmp;
 /delete-node/ &aoss_cti;
diff --git a/configs/qcom_defconfig b/configs/qcom_defconfig
index bf7545c8f6d..f195af28c36 100644
--- a/configs/qcom_defconfig
+++ b/configs/qcom_defconfig
@@ -178,3 +178,7 @@ CONFIG_CMD_GPT=y
 CONFIG_WDT=y
 CONFIG_WDT_QCOM=y
 CONFIG_CMD_WDT=y
+
+CONFIG_DM_RNG=y
+CONFIG_RNG_MSM=y
+CONFIG_CMD_RNG=y
diff --git a/drivers/rng/msm_rng.c b/drivers/rng/msm_rng.c
index 658c153d3ed..7d574df2c68 100644
--- a/drivers/rng/msm_rng.c
+++ b/drivers/rng/msm_rng.c
@@ -36,6 +36,10 @@ struct msm_rng_priv {
 	struct clk clk;
 };
 
+struct msm_rng_match_data {
+	bool skip_init;
+};
+
 static int msm_rng_read(struct udevice *dev, void *data, size_t len)
 {
 	struct msm_rng_priv *priv = dev_get_priv(dev);
@@ -97,13 +101,17 @@ static int msm_rng_enable(struct msm_rng_priv *priv, int enable)
 static int msm_rng_probe(struct udevice *dev)
 {
 	struct msm_rng_priv *priv = dev_get_priv(dev);
-
 	int ret;
 
+	struct msm_rng_match_data *data = (struct msm_rng_match_data *)dev_get_driver_data(dev);
+
 	priv->base = dev_read_addr(dev);
 	if (priv->base == FDT_ADDR_T_NONE)
 		return -EINVAL;
 
+	if (data->skip_init)
+		return 0;
+
 	ret = clk_get_by_index(dev, 0, &priv->clk);
 	if (ret)
 		return ret;
@@ -118,6 +126,10 @@ static int msm_rng_probe(struct udevice *dev)
 static int msm_rng_remove(struct udevice *dev)
 {
 	struct msm_rng_priv *priv = dev_get_priv(dev);
+	struct msm_rng_match_data *data = (struct msm_rng_match_data *)dev_get_driver_data(dev);
+
+	if (data->skip_init)
+		return 0;
 
 	return msm_rng_enable(priv, 0);
 }
@@ -126,8 +138,17 @@ static const struct dm_rng_ops msm_rng_ops = {
 	.read = msm_rng_read,
 };
 
+static struct msm_rng_match_data msm_prng_match_data = {
+	.skip_init = false
+};
+
+static struct msm_rng_match_data msm_trng_match_data = {
+	.skip_init = true
+};
+
 static const struct udevice_id msm_rng_match[] = {
-	{ .compatible = "qcom,prng", },
+	{ .compatible = "qcom,prng", .data = &msm_prng_match_data},
+	{ .compatible = "qcom,trng", .data = &msm_trng_match_data},
 	{},
 };
 
-- 
2.34.1

