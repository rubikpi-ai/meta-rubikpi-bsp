From ccbd1c71ec6d8299e8f2823353d4c0b10c899b66 Mon Sep 17 00:00:00 2001
From: Shivendra Pratap <quic_spratap@quicinc.com>
Date: Mon, 20 Nov 2023 15:45:24 +0530
Subject: [PATCH 2/4] QCLINUX: firmware: qcom_scm_addon: Add function
 qcom_scm_spin_cpu

Add function qcom_scm_spin_cpu to qcom_scm_addon. This function
is used by msm_watchdog_test_module for looping the cpu to simulate
a watch bite.

Signed-off-by: Shivendra Pratap <quic_spratap@quicinc.com>
Upstream-Status: Pending
---
 drivers/firmware/qcom_scm_addon.c            | 18 ++++++++++++++++++
 include/linux/firmware/qcom/qcom_scm_addon.h |  6 ++++++
 2 files changed, 24 insertions(+)

diff --git a/drivers/firmware/qcom_scm_addon.c b/drivers/firmware/qcom_scm_addon.c
index 94486f12b25d..f20680a70956 100644
--- a/drivers/firmware/qcom_scm_addon.c
+++ b/drivers/firmware/qcom_scm_addon.c
@@ -48,6 +48,7 @@
 #define QCOM_SCM_BOOT_SEC_WDOG_DIS	0x07
 #define QCOM_SCM_BOOT_SEC_WDOG_TRIGGER	0x08
 #define QCOM_SCM_BOOT_WDOG_DEBUG_PART	0x09
+#define QCOM_SCM_BOOT_SPIN_CPU		0x0d
 
 static int __qcom_scm_get_feat_version(struct device *dev, u64 feat_id, u64 *version)
 {
@@ -566,3 +567,20 @@ void qcom_scm_disable_sdi(void)
 		pr_err("Failed to disable secure wdog debug: %d\n", ret);
 }
 EXPORT_SYMBOL_GPL(qcom_scm_disable_sdi);
+
+/**
+ * qcom_scm_spin_cpu(void) - spin on cpu
+ */
+int qcom_scm_spin_cpu(void)
+{
+	struct qcom_scm_desc desc = {
+		.svc = QCOM_SCM_SVC_BOOT,
+		.cmd = QCOM_SCM_BOOT_SPIN_CPU,
+		.owner = ARM_SMCCC_OWNER_SIP,
+		.args[0] = 0,
+		.arginfo = QCOM_SCM_ARGS(1),
+	};
+
+	return qcom_scm_call(__scm->dev, &desc, NULL);
+}
+EXPORT_SYMBOL_GPL(qcom_scm_spin_cpu);
diff --git a/include/linux/firmware/qcom/qcom_scm_addon.h b/include/linux/firmware/qcom/qcom_scm_addon.h
index 9715526049f6..f59aa2e1f6c3 100644
--- a/include/linux/firmware/qcom/qcom_scm_addon.h
+++ b/include/linux/firmware/qcom/qcom_scm_addon.h
@@ -49,6 +49,7 @@ extern int qcom_scm_delete_shm_bridge(u64 handle);
 extern int qcom_scm_create_shm_bridge(u64 pfn_and_ns_perm_flags,
 			u64 ipfn_and_s_perm_flags, u64 size_and_flags, u64 ns_vmids,
 			u64 *handle);
+extern int qcom_scm_spin_cpu(void);
 
 #else
 static inline bool qcom_scm_dcvs_ca_available(void)
@@ -192,5 +193,10 @@ static inline int qcom_scm_create_shm_bridge(u64 pfn_and_ns_perm_flags,
 	return -EPERM;
 }
 
+static inline int qcom_scm_spin_cpu(void)
+{
+	return -EPERM;
+}
+
 #endif
 #endif
-- 
2.34.1

