From eb59a902bcd4d395348f3964a83f91868bb90e0a Mon Sep 17 00:00:00 2001
From: Viken Dadhaniya <quic_vdadhani@quicinc.com>
Date: Thu, 6 Mar 2025 10:13:07 +0530
Subject: [PATCH 1/1] PENDING: i2c: qcom-geni: Defer i2c/spi/uart geni driver
 probe if firmware file not found

The I2C, SPI and UART serial driver probes are failing because the qupv3fw
file is not present in /lib/firmware during the early stages of kernel
boot. As a result, the protocol client drivers are also failing.

Defer the driver probe if the firmware file is not present in
/lib/firmware to avoid early probe failure.

Use ratelimited error messages for firmware loading failures to prevent
excessive logging in scenarios where multiple firmware load attempts fail
in quick succession.

Change-Id: Ia6f5a968584f596c3f139add6b8f763425372a7e
Signed-off-by: Viken Dadhaniya <quic_vdadhani@quicinc.com>
Upstream-Status: pending
---
 drivers/i2c/busses/i2c-qcom-geni.c    | 5 ++++-
 drivers/soc/qcom/qcom-geni-se.c       | 9 +++++----
 drivers/spi/spi-geni-qcom.c           | 5 ++++-
 drivers/tty/serial/qcom_geni_serial.c | 5 ++++-
 4 files changed, 17 insertions(+), 7 deletions(-)

diff --git a/drivers/i2c/busses/i2c-qcom-geni.c b/drivers/i2c/busses/i2c-qcom-geni.c
index 5d4431159e26..1c52108d5553 100644
--- a/drivers/i2c/busses/i2c-qcom-geni.c
+++ b/drivers/i2c/busses/i2c-qcom-geni.c
@@ -862,9 +862,12 @@ static int geni_i2c_probe(struct platform_device *pdev)
 	if (proto != GENI_SE_I2C) {
 		ret = geni_load_se_firmware(&gi2c->se, GENI_SE_I2C);
 		if (ret) {
-			dev_err(gi2c->se.dev, "i2c firmware load failed ret: %d\n", ret);
 			geni_se_resources_off(&gi2c->se);
 			clk_disable_unprepare(gi2c->core_clk);
+			if (ret == -ENOENT)
+				return -EPROBE_DEFER;
+
+			dev_err(gi2c->se.dev, "i2c firmware load failed ret: %d\n", ret);
 			return ret;
 		}
 	}
diff --git a/drivers/soc/qcom/qcom-geni-se.c b/drivers/soc/qcom/qcom-geni-se.c
index 8cdf0bef1cd6..20b8297c64d1 100644
--- a/drivers/soc/qcom/qcom-geni-se.c
+++ b/drivers/soc/qcom/qcom-geni-se.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 // Copyright (c) 2017-2018, The Linux Foundation. All rights reserved.
-// Copyright (c) 2024 Qualcomm Innovation Center, Inc. All rights reserved.
+// Copyright (c) 2024-2025 Qualcomm Innovation Center, Inc. All rights reserved.
 
 /* Disable MMIO tracing to prevent excessive logging of unwanted MMIO traces */
 #define __DISABLE_TRACE_MMIO__
@@ -1274,7 +1274,8 @@ int qup_fw_load(struct qup_se_rsc *rsc)
 
 	ret = request_firmware(&fw, QUP_FW_ELF_FILE, dev);
 	if (ret) {
-		dev_err(dev, "request_firmware failed for %d: %d\n", rsc->protocol, ret);
+		dev_err_ratelimited(dev, "request_firmware failed for %d: %d\n",
+				    rsc->protocol, ret);
 		return ret;
 	}
 
@@ -1324,8 +1325,8 @@ int geni_load_se_firmware(struct geni_se *se,
 
 		ret = qup_fw_load(&rsc);
 		if (ret) {
-			dev_err(se->dev,  "Firmware Loading failed for proto: %s Error: %d\n",
-				protocol_name[rsc.protocol], ret);
+			dev_err_ratelimited(se->dev, "Firmware Loading failed for proto: %s Error: %d\n",
+					    protocol_name[rsc.protocol], ret);
 			return ret;
 		}
 
diff --git a/drivers/spi/spi-geni-qcom.c b/drivers/spi/spi-geni-qcom.c
index ed723191e3a8..2437b5000b40 100644
--- a/drivers/spi/spi-geni-qcom.c
+++ b/drivers/spi/spi-geni-qcom.c
@@ -666,7 +666,10 @@ static int spi_geni_init(struct spi_geni_master *mas)
 	} else if (proto != GENI_SE_SPI) {
 		ret = geni_load_se_firmware(se, GENI_SE_SPI);
 		if (ret) {
-			dev_err(mas->dev, "spi master firmware load failed ret: %d\n", ret);
+			if (ret == -ENOENT)
+				ret = -EPROBE_DEFER;
+			else
+				dev_err(mas->dev, "spi master firmware load failed ret: %d\n", ret);
 			goto out_pm;
 		}
 	}
diff --git a/drivers/tty/serial/qcom_geni_serial.c b/drivers/tty/serial/qcom_geni_serial.c
index 60688c5a8b16..e0cb50331d9c 100644
--- a/drivers/tty/serial/qcom_geni_serial.c
+++ b/drivers/tty/serial/qcom_geni_serial.c
@@ -1111,7 +1111,10 @@ static int qcom_geni_serial_port_setup(struct uart_port *uport)
 	if (proto != GENI_SE_UART) {
 		ret = geni_load_se_firmware(&port->se, GENI_SE_UART);
 		if (ret) {
-			dev_err(uport->dev, "UART firmware load failed ret: %d\n", ret);
+			if (ret == -ENOENT)
+				ret = -EPROBE_DEFER;
+			else
+				dev_err(uport->dev, "UART firmware load failed ret: %d\n", ret);
 			return ret;
 		}
 	}
-- 
2.34.1

